
add_library(platform_config INTERFACE)

if(CMAKE_SIZEOF_VOID_P MATCHES "8")
    set(SE_64BIT ON)
    target_compile_definitions(platform_config INTERFACE -DPLATFORM_64BITS=1) # -DX64BITS=1
    message(STATUS "Building for 64 Bit")
else()
    set(SE_64BIT OFF)
    message(STATUS "Building for 32 Bit")
endif()

if(ANDROID)
    message(STATUS "Building for Android")
    set(SE_LINUX ON)
    target_compile_definitions(platform_config INTERFACE -D_ANDROID -DANDROID)
    target_compile_definitions(platform_config INTERFACE -D_LINUX -DLINUX)
    set(SE_LIBRARY_STATIC_EXT ".a")
    set(SE_LIBRARY_SHARED_EXT ".so")
    set(SE_LIBRARY_PREFIX "lib")

    if(SE_64BIT)
        set(SE_LIBRARY_DIR ${SE_SRC_PATH}/lib/linux64)
        set(SE_LIBRARY_STATIC_SUFFIX "")
    else()
        set(SE_LIBRARY_DIR ${SE_SRC_PATH}/lib/linux)
        set(SE_LIBRARY_STATIC_SUFFIX "_i486")
    endif()
elseif(CMAKE_SYSTEM_NAME MATCHES "Darwin")
    message(STATUS "Building for macOS")
    set(SE_OSX ON)
    target_compile_definitions(platform_config INTERFACE -DOSX -D_OSX)
    set(SE_LIBRARY_STATIC_EXT ".a")
    set(SE_LIBRARY_SHARED_EXT ".dylib")
    set(SE_LIBRARY_PREFIX "lib")

    if(SE_64BIT)
        set(SE_LIBRARY_DIR ${SE_SRC_PATH}/lib/osx64)
        set(SE_LIBRARY_STATIC_SUFFIX "")
    else()
        set(SE_LIBRARY_DIR ${SE_SRC_PATH}/lib/mac)
        set(SE_LIBRARY_STATIC_SUFFIX "_i486")
    endif()
elseif(CMAKE_SYSTEM_NAME MATCHES "Linux")
    message(STATUS "Building for Linux")
    set(SE_LINUX ON)
    target_compile_definitions(platform_config INTERFACE -D_LINUX -DLINUX)
    set(SE_LIBRARY_STATIC_EXT ".a")
    set(SE_LIBRARY_SHARED_EXT ".so")
    set(SE_LIBRARY_PREFIX "lib")

    if(SE_64BIT)
        set(SE_LIBRARY_DIR ${SE_SRC_PATH}/lib/linux64)
        set(SE_LIBRARY_STATIC_SUFFIX "")
    else()
        set(SE_LIBRARY_DIR ${SE_SRC_PATH}/lib/linux)
        set(SE_LIBRARY_STATIC_SUFFIX "_i486")
    endif()
elseif(WIN32)
    message(STATUS "Building for Windows")
    set(SE_WIN32 ON)
    set(SE_LIBRARY_DIR ${SE_SRC_PATH}/lib/public)
    set(SE_LIBRARY_STATIC_EXT ".lib")
    set(SE_LIBRARY_SHARED_EXT ".dll")
    set(SE_LIBRARY_STATIC_SUFFIX "")
endif()

target_compile_definitions(platform_config INTERFACE "-D_DLL_EXT=${SE_LIBRARY_SHARED_EXT}")

if(NOT WIN32)
    set(SE_POSIX ON)
endif()

if(SE_POSIX)
    target_compile_definitions(platform_config INTERFACE -DPOSIX -D_POSIX)
endif()

if(MSVC)
    target_compile_options(platform_config INTERFACE /wd4819 /wd4828 /wd5033 /permissive- /utf-8)
    target_compile_definitions(platform_config INTERFACE -D_CRT_SECURE_NO_WARNINGS=1)
elseif(${CMAKE_CXX_COMPILER_ID} MATCHES "Clang")
    target_compile_options(platform_config INTERFACE -Wno-register -Wno-dynamic-exception-spec -Wno-implicit-const-int-float-conversion -Wno-deprecated-volatile -Wno-inconsistent-missing-override -Wno-invalid-offsetof -Wno-null-dereference)
    target_compile_options(platform_config INTERFACE -fvisibility=hidden)
    target_compile_definitions(platform_config INTERFACE -DGNUC)
elseif(${CMAKE_CXX_COMPILER_ID} MATCHES "GNU")
    target_compile_options(platform_config INTERFACE -Wno-register -Wno-narrowing -Wno-volatile)
    target_compile_options(platform_config INTERFACE -fvisibility=hidden)
    target_compile_definitions(platform_config INTERFACE -DGNUC)
endif()

if(CMAKE_BUILD_TYPE MATCHES "Debug")
    target_compile_definitions(platform_config INTERFACE -DDEBUG=1 -D_DEBUG=1)
else()
    target_compile_definitions(platform_config INTERFACE -DNDEBUG=1)
endif()

if(SE_OSX)
    # Newer macOS forbids this
    target_compile_definitions(platform_config INTERFACE -DNO_HOOK_MALLOC -DNO_MALLOC_OVERRIDE)
endif()